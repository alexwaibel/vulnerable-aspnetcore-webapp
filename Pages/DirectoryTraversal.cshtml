@page
@model DirectoryTraversalModel
@{
ViewData["Title"] = "Directory Traversal";
}
<h1>@ViewData["Title"]</h1>

<div>
    <h3>Introduction</h3>
    <p>Directory traversal (aka path traversal) attacks occur when improperly validated user input is used to construct
        a file path. This can enable an attacker to access arbitrary files on the host.</p>
    <ul>
        <li>Learn more about <a target="_blank" rel="noopener noreferrer"
                href="https://portswigger.net/web-security/file-path-traversal">directory traversal from
                PortSwigger</a>.</li>
        <li>Security considerations when serving static files in .NET <a target="_blank" rel="noopener noreferrer"
                href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/static-files?view=aspnetcore-8.0#security-considerations-for-static-files">can
                be found here</a>.</li>
    </ul>
</div>

<div>
    <h3>.NET Examples</h3>

    <h4>Insecure Example</h4>
    <div>
        <p>The below image is vulnerable. The filename it uses can be overriden by providing the
            <code>DangerousFileNameInput</code> query parameter. This parameter is then used blindly to construct the
            file path with <a target="_blank" rel="noopener noreferrer"
                href="https://learn.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-8.0">Path.Combine</a>
            which is a common source of directory traversal vulnerabilities.
            This example also highlights the danger of using <a target="_blank" rel="noopener noreferrer"
                href="https://learn.microsoft.com/en-us/aspnet/core/mvc/models/model-binding?view=aspnetcore-8.0#model-binding-for-http-get-requests">model
                binding</a> on <kbd>GET</kbd> requests, as these become
            another vector for user input.
        </p>
        <p>This can be exploited to access arbitrary files. For example you can request <a asp-area=""
                asp-page="/DirectoryTraversal"
                asp-route-DangerousFileNameInput="../../.gitignore">/DirectoryTraversal?DangerousFileNameInput=../../.gitignore</a>.
            In the
            response, grab the below <code>img</code> element's <code>src</code> value. Remove the
            <code>data:image/png;base64,</code> prefix and base64 decode the remaining string and you should see this
            repo's <kbd>.gitignore</kbd> file.
        </p>
        <img src="@Model.DangerousFileContent" class="rounded mx-auto d-block" alt="Danger sign" />
        <h5>Mitigations</h5>
        <p>If possible, it is best to avoid passing user-supplied strings to filesystem APIs. First, consider if you can
            rewrite your feature in a safer way. If passing user-supplied strings to a filesystem API can't be avoided,
            it's recommended to both:
        <ul>
            <li>
                <p>Validate the user input before it is used</p>
                <ul>
                    <li>
                        Ideally comparing against an allowlist
                    </li>
                    <li>
                        <p>Otherwise, verifying input doesn't contain any unexpected characters</p>
                        <ul>
                            <li>
                                Be careful of clever encodings (such as double URL encoding escape sequences), which can
                                often trivially bypass such validation
                            </li>
                            <li>
                                In .NET <a target="_blank" rel="noopener noreferrer"
                                    href="https://learn.microsoft.com/en-us/dotnet/api/system.io.path.getinvalidpathchars?view=net-8.0">Path.GetInvalidFileNameChars</a>
                                will attempt to identify invalid path characters, but as the remark section states the
                                set of dangerous characters can very widely by file system.
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li>
                Combine the validated user input string with the filename input using a filesystem API, and then verify
                the result path matches your expectation.
            </li>
        </ul>
        </p>
    </div>

    <h4>Secure Example</h4>
    <div>
        <p>The below image is not vulnerable. It uses the <a target="_blank" rel="noopener noreferrer"
                href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.staticfileextensions.usestaticfiles">UseStaticFiles</a>
            method in <kbd>Program.cs</kbd> to enable static files to be served from the web root and accesses these
            files with a hardcoded path.</p>
        <img src="~/images/hardhat.jpg" class="rounded mx-auto d-block" alt="Protective equipment" />
    </div>
    <div>
        <p>The below image is not vulnerable. Although it uses the AllowlistedFileNameInput parameter, the filename
            input is checked against a list of permitted inputs. For example you can request <a asp-area=""
                asp-page="/DirectoryTraversal"
                asp-route-AllowlistedFileNameInput="danger.jpg">/DirectoryTraversal?AllowlistedFileNameInput=danger.jpg</a>
            but <a asp-area="" asp-page="/DirectoryTraversal"
                asp-route-AllowlistedFileNameInput="../../.gitignore">/DirectoryTraversal?AllowlistedFileNameInput=../../.gitignore</a>
            won't work.
        </p>
        <img src="@Model.AllowlistedFileContent" class="rounded mx-auto d-block" alt="Protective equipment" />
    </div>
</div>